<program> ::= <program-piece> <EOF>
            | <program-piece> <program>

<program-piece> ::= <expr>
                  | <assignment>
                  | <control-flow>

<assignment> ::= <var-assignment>
               | <const-assignment>

<var-assignment> ::= "$"<identifier> "=" <expr>

<const-assignment> ::= "%"<identifier> "=" <expr>

<identifier> ::= <identifier-char-start> <identifier-char-string>

<expr> ::= <literal>
         | <identifier>
         | <boolean-expr>
         | <expr> "+" <expr>
         | <expr> "-" <expr>
         | <expr> "*" <expr>
         | <expr> "/" <expr>
         | <func-call>

<literal> ::= "NULL"
            | <string>
            | <num-literal>
            | <path>

<boolean-expr> ::= "TRUE"
                 | "FALSE"
                 | <expr> "==" <expr>
                 | <expr> ">" <expr>
                 | <expr> "<" <expr>
                 | <expr> "<=" <expr>
                 | <expr> ">=" <expr>
                 | <identifier>
                 | <boolean-expr> "&" <boolean-expr>
                 | <boolean-expr> "|" <boolean-expr>
                 | "!"<boolean-expr>

<string> ::= "\""<any>*"\""

<num-literal> ::= <integer>
                | <integer>"."<integer>

<identifier-chars> ::= <identifier-char-start>
                     | <digit>

<identifier-char-string> ::= <identifier-chars>
                           | <identifier-chars> <identifier-char-string>

<identifier-char-start> ::= "_"
                          | <letter>

<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<integer> ::= <digit>
            | <digit> <integer>

<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" |
             "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" |
             "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" |
             "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
             "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

<path> ::= <identifier>"/"<path-like>

private <path-like> ::= <any>
                      | <any>"/"


<func-call> ::= <identifier>"(" <arg-list> ")"

<arg-list> ::= <expr>
             | <expr>"," <arg-list>
             | epsilon

<control-flow> ::= <function-declaration>
                 | <for-loop>
                 | <while-loop>
                 | <if-statement>
